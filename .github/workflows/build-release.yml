name: Build Main Branch

# Trigger on pushes to main branch
# Creates versioned releases for main branch builds
on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    name: Build & Release Main
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build extension
        run: npm run package

      - name: Install vsce
        run: npm install -g @vscode/vsce

      - name: Package extension
        run: vsce package --out lsp-mcp-bridge.vsix

      - name: Get version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest version tag (not dev or build tags)
          LATEST_TAG=$(git describe --tags --abbrev=0 --match "v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            # No version tags exist, get all commit messages
            CHANGELOG=$(git log --pretty=format:"- %s (%h by %an)" --no-merges -20)
          else
            # Get commits since the latest version tag
            CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h by %an)" --no-merges)
          fi
          
          # Handle empty changelog
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- No changes since last release"
          fi
          
          # Escape for GitHub Actions
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Get commit count for build number
        id: build-num
        run: |
          COUNT=$(git rev-list --count HEAD)
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ steps.package-version.outputs.version }}-build.${{ steps.build-num.outputs.count }}
        run: |
          gh release create "$TAG_NAME" \
            --title "Main Build $TAG_NAME" \
            --notes "## ðŸš€ Main Branch Build
          
          **Version:** ${{ steps.package-version.outputs.version }}  
          **Build:** #${{ steps.build-num.outputs.count }}  
          **Commit:** $(git rev-parse --short HEAD) - $(git log -1 --pretty=format:'%s')  
          **Built:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          
          ## Changes in this build
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          Download the \`lsp-mcp-bridge.vsix\` file and install it in VS Code:
          \`\`\`bash
          code --install-extension lsp-mcp-bridge.vsix
          \`\`\`
          
          Or manually: Extensions â†’ â‹¯ (Views and More Actions) â†’ Install from VSIX
          
          ---
          ðŸ’¡ **For marketplace releases:** Use the \"Publish to Marketplace\" workflow to create an official release." \
            lsp-mcp-bridge.vsix

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: lsp-mcp-bridge-v${{ steps.package-version.outputs.version }}-build.${{ steps.build-num.outputs.count }}
          path: lsp-mcp-bridge.vsix
          retention-days: 90
